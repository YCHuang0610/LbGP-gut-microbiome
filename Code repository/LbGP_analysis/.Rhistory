colnames(data) <- substr(colnames(data),1,nchar(colnames(data))-5)
counts <- data[,-1]
counts_DSS<- subset(counts[,21:25])
counts_LbGP <- subset(counts[,26:30])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
# 创建分组
group <- c(rep("DSS",5),rep("LbGP",5))
y <- DGEList(counts=DSSLbGP, group=group)
# 数据过滤
# filterByExpr函数用于确定哪些计数足够大，可以保留在统计分析中。
# 这里默认的min.count = 10, min.total.count = 15，当然也可以通过参数自己设定。
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
# 计算标准化因子
y <- calcNormFactors(y)
# 计算离散度
y <- estimateDisp(y)
# 显著性检验
et <- exactTest(y)
# 获取排名靠前的OTU，这里设置n=100000是为了输出所有OTU
et <- topTags(et, n=100000)
# 转换为数据框类型
et <- as.data.frame(et)
# 将行名粘贴为数据框的第一列
et <- cbind(rownames(et),et)
# 指定列名
colnames(et) <- c("KO", "log2FoldChange", "log2CPM", "PValue", "FDR")
## 差异OTU筛选
# 取p值小于0.05并且差异倍数大于2的ASV
etSig <- et[which(et$PValue < 0.05 & abs(et$log2FoldChange) > 1),]
# 加入一列，up_down 体现上下调信息，差异倍数大于1上调，小于1下调
# 微生物用LbGP,DSS，基因用up,down
etSig[which(etSig$log2FoldChange > 0), "level"] <- "LbGP"
etSig[which(etSig$log2FoldChange < 0), "level"] <- "DSS"
head(etSig)
library(ggplot2)
et$level=as.factor(ifelse(et$PValue< 0.05 & abs(et$log2FoldChange)>1,
ifelse(et$log2FoldChange> 1,'LbGP','DSS'),'No'))
descri <- data.frame(KO=rownames(data),descri=data$descri)
merge_et <- merge(et,descri,by="KO",sort=F)
merge_et$text<- NA
merge_et$text[1:10] <- merge_et$descri[1:10]
p <- ggplot(data=merge_et, aes(x=log2FoldChange, y=-log10(PValue), color=level)) +
geom_point() +
ggtitle('Volcano Plot of DSS vs LbGP') +
scale_color_manual(values=c("blue", "red","grey")) +
geom_vline(xintercept=c(-1,1), lty=2, col="black") +
geom_hline(yintercept=-log10(0.05), lty=2, col="black")
LbGP_count <- sum(etSig$level=='LbGP')
DSS_count <- sum(etSig$level=='DSS')
write.csv(merge_et,file='./volcano/volcano.csv',row.names = F)
p <- p + theme_bw()
p <- p + geom_text(aes(label = text), size = 2,color = "black")
p
View(merge_et)
library( "edgeR" )
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/pred_metagenome_unstrat_descrip.tsv",header = T,row.names = 1,sep = '\t')
colnames(data) <- substr(colnames(data),1,nchar(colnames(data))-5)
counts <- data[,-1]
counts_DSS<- subset(counts[,21:25])
counts_LbGP <- subset(counts[,26:30])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
# 创建分组
group <- c(rep("DSS",5),rep("LbGP",5))
y <- DGEList(counts=DSSLbGP, group=group)
# 数据过滤
# filterByExpr函数用于确定哪些计数足够大，可以保留在统计分析中。
# 这里默认的min.count = 10, min.total.count = 15，当然也可以通过参数自己设定。
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
# 计算标准化因子
y <- calcNormFactors(y)
# 计算离散度
y <- estimateDisp(y)
# 显著性检验
et <- exactTest(y)
# 获取排名靠前的OTU，这里设置n=100000是为了输出所有OTU
et <- topTags(et, n=100000)
# 转换为数据框类型
et <- as.data.frame(et)
# 将行名粘贴为数据框的第一列
et <- cbind(rownames(et),et)
# 指定列名
colnames(et) <- c("KO", "log2FoldChange", "log2CPM", "PValue", "FDR")
## 差异OTU筛选
# 取p值小于0.05并且差异倍数大于2的ASV
etSig <- et[which(et$PValue < 0.05 & abs(et$log2FoldChange) > 1),]
# 加入一列，up_down 体现上下调信息，差异倍数大于1上调，小于1下调
# 微生物用LbGP,DSS，基因用up,down
etSig[which(etSig$log2FoldChange > 0), "level"] <- "LbGP"
etSig[which(etSig$log2FoldChange < 0), "level"] <- "DSS"
head(etSig)
library(ggplot2)
et$level=as.factor(ifelse(et$PValue< 0.05 & abs(et$log2FoldChange)>1,
ifelse(et$log2FoldChange> 1,'LbGP','DSS'),'No'))
descri <- data.frame(KO=rownames(data),descri=data$descri)
merge_et <- merge(et,descri,by="KO",sort=F)
merge_et$text<- NA
merge_et$text[c(1,2,3,10,11,15:18)] <- merge_et$descri[c(1,2,3,10,11,15:18)]
p <- ggplot(data=merge_et, aes(x=log2FoldChange, y=-log10(PValue), color=level)) +
geom_point() +
ggtitle('Volcano Plot of DSS vs LbGP') +
scale_color_manual(values=c("blue", "red","grey")) +
geom_vline(xintercept=c(-1,1), lty=2, col="black") +
geom_hline(yintercept=-log10(0.05), lty=2, col="black")
LbGP_count <- sum(etSig$level=='LbGP')
DSS_count <- sum(etSig$level=='DSS')
write.csv(merge_et,file='./volcano/volcano.csv',row.names = F)
p <- p + theme_bw()
p <- p + geom_text(aes(label = text), size = 2,color = "black")
p
library( "edgeR" )
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/pred_metagenome_unstrat_descrip.tsv",header = T,row.names = 1,sep = '\t')
colnames(data) <- substr(colnames(data),1,nchar(colnames(data))-5)
counts <- data[,-1]
counts_DSS<- subset(counts[,21:25])
counts_LbGP <- subset(counts[,26:30])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
# 创建分组
group <- c(rep("DSS",5),rep("LbGP",5))
y <- DGEList(counts=DSSLbGP, group=group)
# 数据过滤
# filterByExpr函数用于确定哪些计数足够大，可以保留在统计分析中。
# 这里默认的min.count = 10, min.total.count = 15，当然也可以通过参数自己设定。
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
# 计算标准化因子
y <- calcNormFactors(y)
# 计算离散度
y <- estimateDisp(y)
# 显著性检验
et <- exactTest(y)
# 获取排名靠前的OTU，这里设置n=100000是为了输出所有OTU
et <- topTags(et, n=100000)
# 转换为数据框类型
et <- as.data.frame(et)
# 将行名粘贴为数据框的第一列
et <- cbind(rownames(et),et)
# 指定列名
colnames(et) <- c("KO", "log2FoldChange", "log2CPM", "PValue", "FDR")
## 差异OTU筛选
# 取p值小于0.05并且差异倍数大于2的ASV
etSig <- et[which(et$PValue < 0.05 & abs(et$log2FoldChange) > 1),]
# 加入一列，up_down 体现上下调信息，差异倍数大于1上调，小于1下调
# 微生物用LbGP,DSS，基因用up,down
etSig[which(etSig$log2FoldChange > 0), "level"] <- "LbGP"
etSig[which(etSig$log2FoldChange < 0), "level"] <- "DSS"
head(etSig)
library(ggplot2)
et$level=as.factor(ifelse(et$PValue< 0.05 & abs(et$log2FoldChange)>1,
ifelse(et$log2FoldChange> 1,'LbGP','DSS'),'No'))
descri <- data.frame(KO=rownames(data),descri=data$descri)
merge_et <- merge(et,descri,by="KO",sort=F)
merge_et$text<- NA
merge_et$text[1:20] <- merge_et$descri[1:20]
p <- ggplot(data=merge_et, aes(x=log2FoldChange, y=-log10(PValue), color=level)) +
geom_point() +
ggtitle('Volcano Plot of DSS vs LbGP') +
scale_color_manual(values=c("blue", "red","grey")) +
geom_vline(xintercept=c(-1,1), lty=2, col="black") +
geom_hline(yintercept=-log10(0.05), lty=2, col="black")
LbGP_count <- sum(etSig$level=='LbGP')
DSS_count <- sum(etSig$level=='DSS')
write.csv(merge_et,file='./volcano/volcano.csv',row.names = F)
p <- p + theme_bw()
p <- p + geom_text(aes(label = text), size = 2,color = "black")
p
library(edgeR)
# create DGE list
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/pred_metagenome_unstrat_descrip.tsv",header = T,row.names = 1,sep = '\t')
colnames(data) <- substr(colnames(data),1,nchar(colnames(data))-5)
counts <- data[,-1]
counts_DSS<- subset(counts[,21:25])
counts_LbGP <- subset(counts[,26:30])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
group <- c(rep("DSS",5),rep("LbGP",5))
d <- DGEList(counts=DSSLbGP, group=group)
d = calcNormFactors(y)
library(edgeR)
# create DGE list
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/pred_metagenome_unstrat_descrip.tsv",header = T,row.names = 1,sep = '\t')
colnames(data) <- substr(colnames(data),1,nchar(colnames(data))-5)
counts <- data[,-1]
counts_DSS<- subset(counts[,21:25])
counts_LbGP <- subset(counts[,26:30])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
group <- c(rep("DSS",5),rep("LbGP",5))
d <- DGEList(counts=DSSLbGP, group=group)
d = calcNormFactors(d)
# 生成实验设计矩阵
design.mat = model.matrix(~ 0 + d$samples$group)
View(design.mat)
colnames(design.mat)=levels(genotypes)
View(design.mat)
colnames(design.mat)=levels(group)
View(design.mat)
colnames(design.mat)=c('DSS','LbGP')
View(design.mat)
d2 = estimateGLMCommonDisp(d, design.mat)
d2 = estimateGLMTagwiseDisp(d2, design.mat)
fit = glmFit(d2, design.mat)
# 设置比较组
BvsA <- makeContrasts(contrasts = "OE-WT", levels=design.mat)
# 设置比较组
BvsA <- makeContrasts(contrasts = "DSS-LbGP", levels=design.mat)
# 组间比较,统计Fold change, Pvalue
lrt = glmLRT(fit,contrast=BvsA)
# FDR检验，控制假阳性率小于5%
de_lrt = decideTestsDGE(lrt, adjust.method="fdr", p.value=0.05)
# 导出计算结果
x=lrt$table
x$sig=de_lrt
enriched = row.names(subset(x,sig==1))
depleted = row.names(subset(x,sig==-1))
View(x)
x
pair_group = subset(sub_design, genotype %in% c("OE", "WT"))
View(design)
pair_group = subset(design, group %in% c("DSS", "LbGP"))
View(pair_group)
pair_group = subset(design, Group %in% c("W2_DSS", "W2_LbGP"))
View(pair_group)
# Sig OTU in two genotype
DE=c(enriched,depleted)
sub_norm = as.matrix(norm[DE, rownames(pair_group)])
View(DSSLbGP)
sub <- DSSLbGP[DE,]
View(sub)
heatmap(sub)
pheatmap(sub)
library(pheatmap)
pheatmap(sub)
library(edgeR)
# create DGE list
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/pred_metagenome_unstrat_descrip.tsv",header = T,row.names = 1,sep = '\t')
colnames(data) <- substr(colnames(data),1,nchar(colnames(data))-5)
counts <- data[,-1]
counts_DSS<- subset(counts[,21:25])
counts_LbGP <- subset(counts[,26:30])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
group <- c(rep("DSS",5),rep("LbGP",5))
d <- DGEList(counts=DSSLbGP, group=group)
d = calcNormFactors(d)
# 生成实验设计矩阵
design.mat = model.matrix(~ 0 + d$samples$group)
colnames(design.mat)=c('DSS','LbGP')
d2 = estimateGLMCommonDisp(d, design.mat)
d2 = estimateGLMTagwiseDisp(d2, design.mat)
fit = glmFit(d2, design.mat)
# 设置比较组
BvsA <- makeContrasts(contrasts = "DSS-LbGP", levels=design.mat)
# 组间比较,统计Fold change, Pvalue
lrt = glmLRT(fit,contrast=BvsA)
# FDR检验，控制假阳性率小于5%
de_lrt = decideTestsDGE(lrt, adjust.method="fdr", p.value=0.001)
# 导出计算结果
x=lrt$table
x$sig=de_lrt
enriched = row.names(subset(x,sig==1))
depleted = row.names(subset(x,sig==-1))
library(pheatmap)
pair_group = subset(design, Group %in% c("W2_DSS", "W2_LbGP"))
# Sig OTU in two genotype
DE=c(enriched,depleted)
pheatmap(sub,scale='row',cluster_rows = T,cluster_cols = F)
library(edgeR)
# create DGE list
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/pred_metagenome_unstrat_descrip.tsv",header = T,row.names = 1,sep = '\t')
colnames(data) <- substr(colnames(data),1,nchar(colnames(data))-5)
counts <- data[,-1]
counts_DSS<- subset(counts[,21:25])
counts_LbGP <- subset(counts[,26:30])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
group <- c(rep("DSS",5),rep("LbGP",5))
d <- DGEList(counts=DSSLbGP, group=group)
d = calcNormFactors(d)
# 生成实验设计矩阵
design.mat = model.matrix(~ 0 + d$samples$group)
colnames(design.mat)=c('DSS','LbGP')
d2 = estimateGLMCommonDisp(d, design.mat)
d2 = estimateGLMTagwiseDisp(d2, design.mat)
fit = glmFit(d2, design.mat)
# 设置比较组
BvsA <- makeContrasts(contrasts = "DSS-LbGP", levels=design.mat)
# 组间比较,统计Fold change, Pvalue
lrt = glmLRT(fit,contrast=BvsA)
# FDR检验，控制假阳性率小于5%
de_lrt = decideTestsDGE(lrt, adjust.method="fdr", p.value=0.0001)
# 导出计算结果
x=lrt$table
x$sig=de_lrt
enriched = row.names(subset(x,sig==1))
depleted = row.names(subset(x,sig==-1))
library(pheatmap)
pair_group = subset(design, Group %in% c("W2_DSS", "W2_LbGP"))
# Sig OTU in two genotype
DE=c(enriched,depleted)
sub <- DSSLbGP[DE,]
pheatmap(sub,scale='row',cluster_rows = T,cluster_cols = F)
pheatmap(sub,scale='row',cluster_rows = T,cluster_cols = F,border_color=NA)
library(edgeR)
# create DGE list
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/pred_metagenome_unstrat_descrip.tsv",header = T,row.names = 1,sep = '\t')
colnames(data) <- substr(colnames(data),1,nchar(colnames(data))-5)
counts <- data[,-1]
counts_DSS<- subset(counts[,21:25])
counts_LbGP <- subset(counts[,26:30])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
group <- c(rep("DSS",5),rep("LbGP",5))
d <- DGEList(counts=DSSLbGP, group=group)
d = calcNormFactors(d)
# 生成实验设计矩阵
design.mat = model.matrix(~ 0 + d$samples$group)
colnames(design.mat)=c('DSS','LbGP')
d2 = estimateGLMCommonDisp(d, design.mat)
d2 = estimateGLMTagwiseDisp(d2, design.mat)
fit = glmFit(d2, design.mat)
# 设置比较组
BvsA <- makeContrasts(contrasts = "DSS-LbGP", levels=design.mat)
# 组间比较,统计Fold change, Pvalue
lrt = glmLRT(fit,contrast=BvsA)
# FDR检验，控制假阳性率小于5%
de_lrt = decideTestsDGE(lrt, adjust.method="fdr", p.value=0.00001)
# 导出计算结果
x=lrt$table
x$sig=de_lrt
enriched = row.names(subset(x,sig==1))
depleted = row.names(subset(x,sig==-1))
library(pheatmap)
pair_group = subset(design, Group %in% c("W2_DSS", "W2_LbGP"))
# Sig OTU in two genotype
DE=c(enriched,depleted)
sub <- DSSLbGP[DE,]
pheatmap(sub,scale='row',cluster_rows = T,cluster_cols = F,border_color=NA)
library(edgeR)
# create DGE list
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/pred_metagenome_unstrat_descrip.tsv",header = T,row.names = 1,sep = '\t')
colnames(data) <- substr(colnames(data),1,nchar(colnames(data))-5)
counts <- data[,-1]
counts_DSS<- subset(counts[,21:25])
counts_LbGP <- subset(counts[,26:30])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
group <- c(rep("DSS",5),rep("LbGP",5))
d <- DGEList(counts=DSSLbGP, group=group)
d = calcNormFactors(d)
# 生成实验设计矩阵
design.mat = model.matrix(~ 0 + d$samples$group)
colnames(design.mat)=c('DSS','LbGP')
d2 = estimateGLMCommonDisp(d, design.mat)
d2 = estimateGLMTagwiseDisp(d2, design.mat)
fit = glmFit(d2, design.mat)
# 设置比较组
BvsA <- makeContrasts(contrasts = "DSS-LbGP", levels=design.mat)
# 组间比较,统计Fold change, Pvalue
lrt = glmLRT(fit,contrast=BvsA)
# FDR检验，控制假阳性率小于5%
de_lrt = decideTestsDGE(lrt, adjust.method="fdr", p.value=0.000001)
# 导出计算结果
x=lrt$table
x$sig=de_lrt
enriched = row.names(subset(x,sig==1))
depleted = row.names(subset(x,sig==-1))
library(pheatmap)
pair_group = subset(design, Group %in% c("W2_DSS", "W2_LbGP"))
# Sig OTU in two genotype
DE=c(enriched,depleted)
sub <- DSSLbGP[DE,]
pheatmap(sub,scale='row',cluster_rows = T,cluster_cols = F,border_color=NA)
library(edgeR)
# create DGE list
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/pred_metagenome_unstrat_descrip.tsv",header = T,row.names = 1,sep = '\t')
colnames(data) <- substr(colnames(data),1,nchar(colnames(data))-5)
counts <- data[,-1]
counts_DSS<- subset(counts[,21:25])
counts_LbGP <- subset(counts[,26:30])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
group <- c(rep("DSS",5),rep("LbGP",5))
d <- DGEList(counts=DSSLbGP, group=group)
d = calcNormFactors(d)
# 生成实验设计矩阵
design.mat = model.matrix(~ 0 + d$samples$group)
colnames(design.mat)=c('DSS','LbGP')
d2 = estimateGLMCommonDisp(d, design.mat)
d2 = estimateGLMTagwiseDisp(d2, design.mat)
fit = glmFit(d2, design.mat)
# 设置比较组
BvsA <- makeContrasts(contrasts = "DSS-LbGP", levels=design.mat)
# 组间比较,统计Fold change, Pvalue
lrt = glmLRT(fit,contrast=BvsA)
# FDR检验，控制假阳性率小于5%
de_lrt = decideTestsDGE(lrt, adjust.method="fdr", p.value=0.000005)
# 导出计算结果
x=lrt$table
x$sig=de_lrt
enriched = row.names(subset(x,sig==1))
depleted = row.names(subset(x,sig==-1))
library(pheatmap)
pair_group = subset(design, Group %in% c("W2_DSS", "W2_LbGP"))
# Sig OTU in two genotype
DE=c(enriched,depleted)
sub <- DSSLbGP[DE,]
pheatmap(sub,scale='row',cluster_rows = T,cluster_cols = F,border_color=NA)
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/热图分析.txt",header = T,row.names = 1,sep = '\t')
colnames(data) <- substr(colnames(data),1,nchar(colnames(data))-5)
View(data)
library(edgeR)
# create DGE list
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/热图分析.txt",header = T,row.names = 1,sep = '\t')
View(data)
library(edgeR)
# create DGE list
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/热图分析.txt",header = T,row.names = 1,sep = '\t')
counts_DSS<- subset(counts[,1:5])
counts_LbGP <- subset(counts[,6:10])
counts <- data
counts_DSS<- subset(counts[,1:5])
counts_LbGP <- subset(counts[,6:10])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
View(DSSLbGP)
library(edgeR)
# create DGE list
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/热图分析.txt",header = T,row.names = 1,sep = '\t')
counts <- data
counts_DSS<- subset(counts[,1:5])
counts_LbGP <- subset(counts[,6:10])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
group <- c(rep("DSS",5),rep("LbGP",5))
d <- DGEList(counts=DSSLbGP, group=group)
d = calcNormFactors(d)
# 生成实验设计矩阵
design.mat = model.matrix(~ 0 + d$samples$group)
colnames(design.mat)=c('DSS','LbGP')
d2 = estimateGLMCommonDisp(d, design.mat)
d2 = estimateGLMTagwiseDisp(d2, design.mat)
fit = glmFit(d2, design.mat)
# 设置比较组
BvsA <- makeContrasts(contrasts = "DSS-LbGP", levels=design.mat)
# 组间比较,统计Fold change, Pvalue
lrt = glmLRT(fit,contrast=BvsA)
# FDR检验，控制假阳性率小于5%
de_lrt = decideTestsDGE(lrt, adjust.method="fdr", p.value=0.000005)
# 导出计算结果
x=lrt$table
x$sig=de_lrt
enriched = row.names(subset(x,sig==1))
depleted = row.names(subset(x,sig==-1))
library(pheatmap)
pair_group = subset(design, Group %in% c("W2_DSS", "W2_LbGP"))
# Sig OTU in two genotype
DE=c(enriched,depleted)
sub <- DSSLbGP[DE,]
pheatmap(sub,scale='row',cluster_rows = T,cluster_cols = F,border_color=NA)
library(edgeR)
# create DGE list
design <- read.table("metadata.txt", header=T, row.names=1, sep="\t")
data <- read.table("picrust2_out_pipeline/KO_metagenome_out/热图分析.txt",header = T,row.names = 1,sep = '\t')
counts <- data
counts_DSS<- subset(counts[,1:5])
counts_LbGP <- subset(counts[,6:10])
#转置数据框变为pca用的形式，并添加一列分组因子
DSSLbGP <- cbind(counts_DSS,counts_LbGP)
group <- c(rep("DSS",5),rep("LbGP",5))
d <- DGEList(counts=DSSLbGP, group=group)
d = calcNormFactors(d)
# 生成实验设计矩阵
design.mat = model.matrix(~ 0 + d$samples$group)
colnames(design.mat)=c('DSS','LbGP')
d2 = estimateGLMCommonDisp(d, design.mat)
d2 = estimateGLMTagwiseDisp(d2, design.mat)
fit = glmFit(d2, design.mat)
# 设置比较组
BvsA <- makeContrasts(contrasts = "DSS-LbGP", levels=design.mat)
# 组间比较,统计Fold change, Pvalue
lrt = glmLRT(fit,contrast=BvsA)
# FDR检验，控制假阳性率小于5%
de_lrt = decideTestsDGE(lrt, adjust.method="fdr", p.value=0.05)
# 导出计算结果
x=lrt$table
x$sig=de_lrt
enriched = row.names(subset(x,sig==1))
depleted = row.names(subset(x,sig==-1))
library(pheatmap)
pair_group = subset(design, Group %in% c("W2_DSS", "W2_LbGP"))
# Sig OTU in two genotype
DE=c(enriched,depleted)
sub <- DSSLbGP[DE,]
pheatmap(sub,scale='row',cluster_rows = T,cluster_cols = F,border_color=NA)
packageVersion('pheatmap')
